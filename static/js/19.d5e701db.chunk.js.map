{"version":3,"sources":["views/MathFunction/index.js"],"names":["index","funcList","name","func","x","Math","sin","cos","pow","abs","PI","tan","minx","maxx","acos","asin","atan","state","width","height","mathFunction","legend","data","i","push","dataList","optionHeight","baseHeight","gridList","xAxis","yAxis","series","titleList","num","this","forEach","columnNum","rowNum","parseInt","generateData","text","y","textAlign","textStyle","fontSize","fontWeight","containLabel","type","showSymbol","clip","xAxisIndex","yAxisIndex","gridIndex","minorTick","show","splitLine","lineStyle","color","minorSplitLine","min","max","echarts","init","document","getElementById","baseOption","title","dataZoom","filterMode","startValue","endValue","tooltip","calculable","grid","setOption","setState","resize","id","style","margin","Component"],"mappings":"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","file":"static/js/19.d5e701db.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport echarts from 'echarts'\n\nexport default class index extends Component {\n    constructor() {\n        super()\n        this.state = { width: 100, height: 100 }\n    }\n\n    funcList = () => {\n        return [\n            {\n                name: 'y=x',\n                func: (x) => {\n                    return x\n                }\n            },\n            {\n                name: 'y=sin(x)',\n                func: (x) => {\n                    return Math.sin(x)\n                }\n            },\n            {\n                name: 'y=cos(x)',\n                func: (x) => {\n                    return Math.cos(x)\n                }\n            },\n            {\n                name: 'y=x^2',\n                func: (x) => {\n                    return x * x\n                }\n            },\n            {\n                name: 'y=2^x (位运算)',\n                func: (x) => {\n                    return 2 ^ x\n                }\n            },\n            {\n                name: 'y=0.5^x (位运算)',\n                func: (x) => {\n                    return 0.5 ^ x\n                }\n            },\n            {\n                name: 'y=0.5^x',\n                func: (x) => {\n                    return Math.pow(0.5, x)\n                }\n            },\n            {\n                name: \"y=2^x\",\n                func: (x) => {\n                    return Math.pow(2, x)\n                }\n            },\n            {\n                name: \"y=1/x,(x>0)\",\n                func: (x) => {\n                    if (Math.abs(x) < 0.0001) {\n                        return null\n                    }\n                    return 1 / x\n                }\n            },\n            {\n                name: \"y=tan(x)\",\n                func: (x) => {\n                    // Math.PI/2 +Math.PI*x\n                    if (Math.abs((x - Math.PI / 2) % Math.PI) < 0.01) {\n                        return null\n\n                    }\n                    return Math.tan(x)\n                }\n            },\n            {\n                name: \"y=arccos(x)\",\n                minx: 0,\n                maxx: Math.PI,\n                func: (x) => {\n                    return Math.acos(x)\n                }\n            },\n            {\n                name: \"y=arcsin(x)\",\n                minx: -Math.PI,\n                maxx: Math.PI,\n                func: (x) => {\n                    return Math.asin(x)\n                }\n            },\n            {\n                name: \"y=arctan(x)\",\n                minx: -Math.PI,\n                maxx: Math.PI,\n                func: (x) => {\n                    return Math.atan(x)\n                }\n            }\n\n        ]\n    }\n\n\n    generateData(mathFunction = { name: \"y=x\", func: (x) => { return x } }, legend = 10) {\n        let data = [];\n\n        for (let i = -legend; i <= legend; i += 0.01) {\n            data.push([i, mathFunction.func(i)]);\n        }\n        return data;\n    }\n    componentDidMount() {\n        const baseHeight = 300\n        const baseWidth = 300\n        const baseInterval = 50\n        var dataList = []\n        var optionWidth = (baseWidth + baseInterval) * 2\n        var optionHeight = baseHeight + baseInterval\n        var gridList = []\n        var xAxis = []\n        var yAxis = []\n        var series = []\n        var titleList = []\n        var num = 0\n\n        this.funcList().forEach(mathFunction => {\n            let columnNum = num % 2\n            let rowNum = parseInt(num / 2)\n            let data = this.generateData(mathFunction)\n            titleList.push({\n                text: mathFunction.name && (mathFunction.name),\n                x: columnNum * (baseWidth + baseInterval) + (baseWidth + baseInterval / 2) / 2,\n                y: rowNum * (baseHeight + baseInterval),\n                textAlign: 'center',\n                textStyle: {\n                    fontSize: 20,\n                    fontWeight: 'normal'\n                }\n            })\n            dataList.push(data)\n            gridList.push({\n                x: columnNum * (baseWidth + baseInterval),\n                y: rowNum * (baseHeight + baseInterval) + baseInterval,\n                width: baseWidth,\n                height: baseHeight,\n                containLabel: true\n            })\n            series.push({\n                name: \"name\",\n                type: 'line',\n                showSymbol: false,\n                clip: true,\n                data: data,\n                xAxisIndex: num,\n                yAxisIndex: num\n            })\n            xAxis.push({\n                gridIndex: num,\n                name: 'x',\n                minorTick: {\n                    show: true\n                },\n                splitLine: {\n                    lineStyle: {\n                        color: '#999'\n                    }\n                },\n                minorSplitLine: {\n                    show: true,\n                    lineStyle: {\n                        color: '#ddd'\n                    }\n                }\n            })\n            yAxis.push({\n                gridIndex: num,\n                name: 'y',\n                min: -12,//typeof mathFunction.minx === 'undefined'? -12:mathFunction.minx,\n                max: 12,//typeof mathFunction.maxx === 'undefined'? 12:mathFunction.maxx,\n\n                minorTick: {\n                    show: true\n                },\n                splitLine: {\n                    lineStyle: {\n                        color: '#999'\n                    }\n                },\n                minorSplitLine: {\n                    show: true,\n                    lineStyle: {\n                        color: '#ddd'\n                    }\n                }\n            })\n            num += 1\n            if (num % 2 === 0) {\n                optionHeight += baseHeight + baseInterval\n            }\n\n        });\n\n\n        this.echarts = echarts.init(document.getElementById('math-function-index'))\n\n\n        var baseOption = {\n            title: titleList,\n\n            dataZoom: [{\n                show: true,\n                type: 'inside',\n                filterMode: 'none',\n                xAxisIndex: [0],\n                startValue: -20,\n                endValue: 20\n            }, {\n                show: true,\n                type: 'inside',\n                filterMode: 'none',\n                yAxisIndex: [0],\n                startValue: -20,\n                endValue: 20\n            }],\n            tooltip: {},\n            xAxis: xAxis,\n            yAxis: yAxis,\n            calculable: true,\n            grid: gridList,\n            series: series\n        }\n\n\n        this.echarts.setOption(baseOption)\n\n        this.setState({\n            height: optionHeight,\n            width: optionWidth\n        }, () => {\n            this.echarts.resize()\n        })\n\n    }\n\n    render() {\n\n\n        return (\n            <div id=\"math-function-index\" style={{ margin: '0 auto', width: this.state.width, height: this.state.height }}>\n\n            </div>\n        )\n    }\n}\n"],"sourceRoot":""}